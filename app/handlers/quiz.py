from html import escape as html_escape
from aiogram import types, Dispatcher, html
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import delete
from sqlalchemy.exc import IntegrityError
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload

from app.database import async_session_maker
from app.handlers.buttons import get_help_keyboard
from app.models import Question
from app.logger_setup import get_logger
from app.repositories.questions import QuestionRepository

logger = get_logger(__name__)


async def list_questions_handler(message: types.Message, page: int = 0) -> None:
    QUESTIONS_PER_PAGE = 20
    question_repository = QuestionRepository()
    questions = await question_repository.get_questions()

    if not questions:
        await message.answer("üìö *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.*", parse_mode="Markdown")
        return

    total_pages = (len(questions) + QUESTIONS_PER_PAGE - 1) // QUESTIONS_PER_PAGE

    if page < 0 or page >= total_pages:
        await message.answer("‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.*", parse_mode="Markdown")
        return

    start = page * QUESTIONS_PER_PAGE
    end = start + QUESTIONS_PER_PAGE
    page_questions = questions[start:end]

    response_lines = ["üìã *–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤*\n"]
    for q in page_questions:
        truncated_text = q.text if len(q.text) < 50 else q.text[:47] + "..."
        response_lines.append(f"‚îî `{q.id:03d}` ‚Ä¢ _{html_escape(truncated_text)}_")

    footer = f"\nüìå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    response = "\n".join(response_lines) + footer

    keyboard_buttons = []
    if page > 0:
        keyboard_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"questions_page:{page - 1}"
            )
        )
    if page < total_pages - 1:
        keyboard_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"questions_page:{page + 1}"
            )
        )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])

    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")


async def questions_pagination(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split(":")[1])

    await callback_query.message.delete()
    await list_questions_handler(callback_query.message, page)


async def delete_question_handler(
    message: types.Message, command: CommandObject
) -> None:
    if not command.args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ id –≤–æ–ø—Ä–æ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete_question 1")
        return

    try:
        question_id = int(command.args.split()[0])
    except ValueError:
        await message.answer("Id –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    question_repository = QuestionRepository()
    try:
        if await question_repository.delete_question(question_id):
            await message.answer(f"–í–æ–ø—Ä–æ—Å —Å id {question_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer(f"–í–æ–ø—Ä–æ—Å —Å id {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def solve_question_handler(
    message: types.Message, command: CommandObject
) -> None:
    if not command.args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ id –≤–æ–ø—Ä–æ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /solve_question 1")
        return

    try:
        question_id = int(command.args.split()[0])
    except ValueError:
        await message.answer("Id –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async with async_session_maker() as session:
        query = (
            select(Question)
            .options(selectinload(Question.options))
            .where(Question.id == question_id)
        )
        result = await session.execute(query)
        question = result.scalar()
        if not question:
            await message.answer(f"–í–æ–ø—Ä–æ—Å —Å id {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        response = f"–í–æ–ø—Ä–æ—Å: {html_escape(question.text)}\n\n"

        if question.has_options:
            options = question.options
            if options:
                for idx, option in enumerate(options, start=1):
                    if option.is_correct:
                        response += f"{idx}. <b>{html_escape(option.option_text)}</b>\n"
                    else:
                        response += f"{idx}. {html_escape(option.option_text)}\n"
            else:
                response += "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            response += f"–û—Ç–≤–µ—Ç: {html_escape(question.answer_text or '–ù–µ —É–∫–∞–∑–∞–Ω')}"

        await message.answer(response, parse_mode="HTML")


async def help_handler(message: types.Message) -> None:
    keyboard = get_help_keyboard()

    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    await message.answer(response, reply_markup=keyboard)


def register_quiz_handlers(dp: Dispatcher) -> None:
    dp.message.register(list_questions_handler, Command(commands=["list_questions"]))
    dp.message.register(solve_question_handler, Command(commands=["solve_question"]))
    dp.message.register(delete_question_handler, Command(commands=["delete_question"]))
    dp.message.register(help_handler, Command(commands=["help"]))
    dp.callback_query.register(
        questions_pagination, lambda c: c.data and c.data.startswith("questions_page:")
    )
